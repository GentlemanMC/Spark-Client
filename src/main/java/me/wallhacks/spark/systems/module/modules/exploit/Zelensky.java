package me.wallhacks.spark.systems.module.modules.exploit;

import me.wallhacks.spark.event.render.SkyEvent;
import me.wallhacks.spark.mixin.mixins.spark.MixinRenderGlobal;
import me.wallhacks.spark.systems.module.Module;
import me.wallhacks.spark.util.render.ColorUtil;
import me.wallhacks.spark.util.render.RenderUtil;
import net.minecraft.client.renderer.*;
import net.minecraft.client.renderer.vertex.DefaultVertexFormats;
import net.minecraft.util.ResourceLocation;
import net.minecraft.util.math.MathHelper;
import net.minecraft.util.math.Vec3d;
import net.minecraftforge.client.event.EntityViewRenderEvent;
import net.minecraftforge.client.event.RenderWorldLastEvent;
import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;
import org.lwjgl.opengl.GL11;

import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.Clip;
import javax.sound.sampled.FloatControl;
import java.awt.*;
import java.io.BufferedInputStream;
import java.io.InputStream;

//Fuck Putin
@Module.Registration(name = "Zelensky", description = "The best module")
public class Zelensky extends Module {

    Clip clip;
    AudioInputStream inputStream;



    int old;

    public final ResourceLocation putinSkin = new ResourceLocation("textures/putin.png");

    String s = "";



    public Zelensky() {
        try {




            //relative ot jar file/src folder
            String filePath = "/assets/minecraft/sounds/wideputinwalking.wav";

            //important shit for loading this input stream thing
            InputStream in = this.getClass().getResourceAsStream(filePath);

            InputStream bufferedIn = new BufferedInputStream(in);
            
            inputStream = AudioSystem.getAudioInputStream(bufferedIn);
            clip = AudioSystem.getClip();
            clip.open(inputStream);

            clip.start();



            FloatControl gainControl = (FloatControl) clip.getControl(FloatControl.Type.MASTER_GAIN);

            double gain = .5D; // number between 0 and 1 (loudest)
            float dB = (float) (Math.log(gain) / Math.log(10.0) * 20.0);
            gainControl.setValue(dB);

            clip.stop();
        } catch (Exception e) {
            e.printStackTrace();

        }

        instance = this;
    }
    public static Zelensky instance;

    public static final ResourceLocation END_SKY_TEXTURES = new ResourceLocation("textures/environment/end_sky.png");

    @SubscribeEvent
    public void RenderSky(SkyEvent event) {

        Color up = Color.BLUE;//ColorUtil.fromHSB((System.currentTimeMillis() % 6000) / 6000F, 1f, 1f);
        Color down = Color.YELLOW;//ColorUtil.fromHSB(((System.currentTimeMillis() - 1200) % 6000) / 6000F, 1f, 1f);

        RenderUtil.drawSkyBox(up,down);

        event.setCanceled(true);
    }

    @SubscribeEvent
    public void onFog(EntityViewRenderEvent.FogColors event) {
        Color FogColor = Color.YELLOW;//ColorUtil.fromHSB(((System.currentTimeMillis() - 1200) % 6000) / 6000F, 1f, 1f);


        event.setRed(FogColor.getRed()/255f);
        event.setGreen(FogColor.getGreen()/255f);
        event.setBlue(FogColor.getBlue()/255f);

    }

    @SubscribeEvent
    public void onFogDensity(EntityViewRenderEvent.FogDensity event) {
        event.setDensity(0.005f);

        GlStateManager.setFog(GlStateManager.FogMode.EXP);


        event.setCanceled(true);
    }

    @Override
    public void onDisable() {
        mc.gameSettings.thirdPersonView = old;
        try {
            clip.stop();
        } catch (Exception e) {
            // TODO: handle exception
        }
    }
    @Override
    public void onEnable() {
        old = mc.gameSettings.thirdPersonView;
        mc.gameSettings.thirdPersonView = 2;
        try {
            clip.start();

            clip.loop(Clip.LOOP_CONTINUOUSLY);


        } catch (Exception e) {
            e.printStackTrace();
        }

    }










}
